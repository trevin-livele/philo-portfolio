import React, { useState, useEffect } from "react";
import { DataReport } from "@/entities/DataReport";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Search, FileText, ExternalLink, Users, Globe } from "lucide-react";

import ReportCard from "../components/reports/ReportCard";
import ReportModal from "../components/reports/ReportModal";

const sectors = [
  { value: "all", label: "All Sectors" },
  { value: "healthcare", label: "Healthcare" },
  { value: "education", label: "Education" },
  { value: "agriculture", label: "Agriculture" },
  { value: "governance", label: "Governance" },
  { value: "environment", label: "Environment" },
  { value: "social-development", label: "Social Development" },
  { value: "economic-development", label: "Economic Development" }
];

export default function DataReports() {
  const [reports, setReports] = useState([]);
  const [filteredReports, setFilteredReports] = useState([]);
  const [selectedSector, setSelectedSector] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedReport, setSelectedReport] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadReports();
  }, []);

  useEffect(() => {
    filterReports();
  }, [reports, selectedSector, searchTerm]);

  const loadReports = async () => {
    setIsLoading(true);
    const fetchedReports = await DataReport.list("-created_date");
    setReports(fetchedReports);
    setIsLoading(false);
  };

  const filterReports = () => {
    let filtered = reports;

    if (selectedSector !== "all") {
      filtered = filtered.filter(report => report.sector === selectedSector);
    }

    if (searchTerm) {
      filtered = filtered.filter(report => 
        report.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        report.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        report.client?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    setFilteredReports(filtered);
  };

  const featuredReports = reports.filter(report => report.featured);

  return (
    <div className="min-h-screen bg-slate-50">
      {/* Header */}
      <section className="bg-white border-b border-slate-200 py-16">
        <div className="max-w-4xl mx-auto px-6">
          <div className="text-center">
            <h1 className="text-4xl md:text-5xl font-bold text-slate-900 mb-4">
              Data Analysis Reports
            </h1>
            <p className="text-xl text-slate-600 max-w-2xl mx-auto">
              Comprehensive evaluations and data-driven insights across diverse development sectors
            </p>
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-12 bg-white">
        <div className="max-w-6xl mx-auto px-6">
          <div className="grid md:grid-cols-3 gap-8 text-center">
            <div>
              <div className="text-3xl font-bold text-slate-900 mb-2">{reports.length}</div>
              <div className="text-slate-600">Total Reports</div>
            </div>
            <div>
              <div className="text-3xl font-bold text-slate-900 mb-2">
                {new Set(reports.map(r => r.sector)).size}
              </div>
              <div className="text-slate-600">Sectors Covered</div>
            </div>
            <div>
              <div className="text-3xl font-bold text-slate-900 mb-2">
                {new Set(reports.map(r => r.client)).size}
              </div>
              <div className="text-slate-600">Organizations Served</div>
            </div>
          </div>
        </div>
      </section>

      {/* Featured Reports */}
      {featuredReports.length > 0 && (
        <section className="py-16">
          <div className="max-w-6xl mx-auto px-6">
            <h2 className="text-2xl font-bold text-slate-900 mb-8">Featured Reports</h2>
            <div className="grid md:grid-cols-2 gap-8">
              {featuredReports.map((report) => (
                <ReportCard 
                  key={report.id} 
                  report={report} 
                  onSelect={setSelectedReport}
                  featured={true}
                />
              ))}
            </div>
          </div>
        </section>
      )}

      {/* Filters */}
      <section className="py-8 bg-white border-t border-slate-200">
        <div className="max-w-6xl mx-auto px-6">
          <div className="flex flex-col md:flex-row gap-4 items-center justify-between">
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5" />
              <Input
                placeholder="Search reports..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            
            <Tabs value={selectedSector} onValueChange={setSelectedSector}>
              <TabsList className="bg-slate-100">
                {sectors.slice(0, 4).map(sector => (
                  <TabsTrigger key={sector.value} value={sector.value}>
                    {sector.label}
                  </TabsTrigger>
                ))}
              </TabsList>
            </Tabs>
          </div>
        </div>
      </section>

      {/* Reports Grid */}
      <section className="py-16">
        <div className="max-w-6xl mx-auto px-6">
          {isLoading ? (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
              {Array(6).fill(0).map((_, i) => (
                <Card key={i} className="border-0 shadow-lg">
                  <div className="w-full h-48 bg-slate-200 animate-pulse rounded-t-lg"></div>
                  <CardContent className="p-6">
                    <div className="h-4 bg-slate-200 rounded animate-pulse mb-4"></div>
                    <div className="h-6 bg-slate-200 rounded animate-pulse mb-2"></div>
                    <div className="h-4 bg-slate-200 rounded animate-pulse w-2/3"></div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : filteredReports.length > 0 ? (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
              {filteredReports.map((report) => (
                <ReportCard 
                  key={report.id} 
                  report={report} 
                  onSelect={setSelectedReport}
                />
              ))}
            </div>
          ) : (
            <div className="text-center py-16">
              <div className="w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <FileText className="w-10 h-10 text-slate-400" />
              </div>
              <h3 className="text-xl font-semibold text-slate-900 mb-2">No reports found</h3>
              <p className="text-slate-600">Try adjusting your search or sector filter</p>
            </div>
          )}
        </div>
      </section>

      {/* Report Modal */}
      <ReportModal 
        report={selectedReport}
        onClose={() => setSelectedReport(null)}
      />
    </div>
  );
}